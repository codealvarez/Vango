"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app = require("application");
var ws_service_1 = require("../ws.service");
var router_1 = require("nativescript-angular/router");
var nativescript_loading_indicator_1 = require("nativescript-loading-indicator");
var ApplicationSettings = require("application-settings");
var observableArray = require("tns-core-modules/data/observable-array");
var dialogs = require("tns-core-modules/ui/dialogs");
/* ***********************************************************
* Before you can navigate to this page from your app, you need to reference this page's module in the
* global app router module. Add the following object to the global array of routes:
* { path: "saldo", loadChildren: "./saldo/saldo.module#SaldoModule" }
* Note that this simply points the path to the page module file. If you move the page, you need to update the route too.
*************************************************************/
var loader = new nativescript_loading_indicator_1.LoadingIndicator();
var SaldoComponent = /** @class */ (function () {
    function SaldoComponent(routerExtensions, myService) {
        /* ***********************************************************
        * Use the constructor to inject app services that you need in this component.
        *************************************************************/
        this.routerExtensions = routerExtensions;
        this.myService = myService;
        this.saldo = 0;
        this.myItems = new observableArray.ObservableArray([]);
        this.empresas = [];
        this.idvango = ApplicationSettings.getString('idvango');
    }
    SaldoComponent.prototype.agregarSaldo = function () {
        /*dialogs.alert({
            title: "Carga tu cuenta",
            message: "Puedes agregar saldo a tu cuenta haciendo un pago en Baloto, con la referencia: "+this.idvango+". Automáticamente verás tu saldo actualizado",
            okButtonText: "Entendido"
        }).then(() => {
            console.log("Dialog closed!");
        });*/
        this.routerExtensions.navigate(["/infoRecarga"]);
    };
    SaldoComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    SaldoComponent.prototype.ngOnInit = function () {
        /* ***********************************************************
        * Use the "ngOnInit" handler to initialize data for this component.
        *************************************************************/
        this.consultarDatos();
    };
    SaldoComponent.prototype.consultarDatos = function () {
        var _this = this;
        loader.show({
            message: 'Consultando tu saldo y transacciones'
        });
        var idUsuario = ApplicationSettings.getString('idUsuario');
        var usuario = ApplicationSettings.getString('emailUsuario');
        var idvango = ApplicationSettings.getString('idvango');
        var cedula = ApplicationSettings.getString('cedulaUsuario');
        //et cedula = '1024494634';
        var nombres = ApplicationSettings.getString('nombreUsuario');
        if (idvango != '0') {
            console.log('Con idmember: ' + idvango);
            this.myService.getSaldo(idvango).subscribe(function (result) {
                loader.hide();
                console.log('Resultado del saldo');
                console.log(result);
                if (result.balance) {
                    _this.saldo = result.balance * 1;
                }
            }, function (error) {
                loader.hide();
                console.log('Error consultando saldo');
                console.log(error);
            });
            //Consultar historico de transacciones
            this.myService.getTransacciones(idvango).subscribe(function (res) {
                loader.hide();
                console.log('Resultado de las transacciones');
                console.log(res);
                for (var i = 0; i < Object.keys(res).length; i++) {
                    _this.myItems.push(res[i]);
                }
                //this.saldo=result.balance*1;
            }, function (error) {
                loader.hide();
                console.log('Error consultando saldo');
                console.log(error);
            });
        }
        else {
            console.log('Sin idvango');
            this.seleccionarEmpresa();
        }
    };
    SaldoComponent.prototype.seleccionarEmpresa = function () {
        var _this = this;
        var idUsuario = ApplicationSettings.getString('idUsuario');
        var usuario = ApplicationSettings.getString('emailUsuario');
        var idvango = ApplicationSettings.getString('idvango');
        var cedula = ApplicationSettings.getString('cedulaUsuario');
        //let cedula = '1024494634';
        var nombres = ApplicationSettings.getString('nombreUsuario');
        var empresas = [];
        this.myService.getEmpresas().subscribe(function (result) {
            console.log('Listado de empresas');
            console.log(result);
            for (var i = 0; i < Object.keys(result).length; i++) {
                _this.empresas.push(result[i]);
            }
            console.log(_this.empresas);
            for (var i = 0; i < Object.keys(_this.empresas).length; i++) {
                console.log(_this.empresas[i]);
                empresas.push(_this.empresas[i].name);
            }
            dialogs.action({
                message: "Selecciona tu empresa",
                cancelButtonText: "Cancelar",
                actions: empresas
            }).then(function (result) {
                if (result) {
                    var empresa = result;
                    var idEmpresa = void 0;
                    for (var i = 0; i < Object.keys(_this.empresas).length; i++) {
                        console.log(_this.empresas[i]);
                        if (result == _this.empresas[i].name)
                            idEmpresa = _this.empresas[i].username;
                    }
                    if (cedula) {
                        //cedula,email,nombre,empresa,idEmpresa
                        _this.myService.getIdVango(cedula, usuario, nombres, empresa, idEmpresa).subscribe(function (result) {
                            ApplicationSettings.setString("idvango", result.idvango);
                            _this.exitoIdVango(idUsuario, result.idvango);
                        }, function (error) {
                            console.log('Error en getIdVango');
                            console.log(error);
                        });
                    }
                }
                console.log("Dialog result: " + result);
                if (result == "Option1") {
                    //Do action1
                }
                else if (result == "Option2") {
                    //Do action2
                }
            });
        }, function (error) {
            console.log('Error consultando empresas:');
            console.log(error);
        });
    };
    SaldoComponent.prototype.exitoIdVango = function (idUsuario, idVango) {
        var _this = this;
        console.log('Respuesta del exitoIdMember');
        loader.hide();
        this.myService.asignarIdVango(idUsuario, idVango).subscribe(function (result) {
            console.log('Respuesta de asignación de ID Vango');
            console.log(result);
            _this.consultarDatos();
        }, function (error) {
            console.log('Error asignando idVango');
        });
    };
    SaldoComponent = __decorate([
        core_1.Component({
            selector: "Saldo",
            moduleId: module.id,
            templateUrl: "./saldo.component.html"
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions, ws_service_1.WebService])
    ], SaldoComponent);
    return SaldoComponent;
}());
exports.SaldoComponent = SaldoComponent;
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;base64,
=======
//# sourceMappingURL=data:application/json;base64,
>>>>>>> parent of 16097b7... Pantalla pago OK
